name: Test, Upload Coverage and Release Rust

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:


env:
  build-with-pgo: true

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-pgo: true
            use-cross: false
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use-pgo: true
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-pgo: false # no native runner
            use-cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use-pgo: false # no native runner
            use-cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-pgo: true
            use-cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            use-pgo: true
            use-cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use-pgo: false # no native runner
            use-cross: false
          - os: macos-13 # x86
            target: x86_64-apple-darwin
            use-pgo: true
            use-cross: false
          - os: macos-14 # M1
            target: aarch64-apple-darwin
            use-pgo: true
            use-cross: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build C Libraries and Run Tests
        uses: Reloaded-Project/devops-rust-lightweight-binary@v1
        with:
          crate-name: ${{ github.event.repository.name }}
          target: ${{ matrix.target }}
          use-pgo: ${{ matrix.use-pgo && env.build-with-pgo }}
          use-cross: ${{ matrix.use-cross }}
          features: "c-exports"
          build-library: true
          run-tests-and-coverage: ${{ matrix.target != 'aarch64-pc-windows-msvc' }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
      # Note: The GitHub Runner Images will contain an up to date Rust Stable Toolchain
      #       thus as per recommendation of cargo-semver-checks, we're using stable here.
      #
      # Note to reader. If adding this to a new repo, please clear cache.
      - name: Run cargo-semver-checks
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          SEARCH_RESULT=$(cargo search "^r3localetest$" --limit 1)

          if echo "$SEARCH_RESULT" | grep -q "^r3localetest "; then
            rustup target add ${{ matrix.target }}
            cargo install cargo-semver-checks
            cargo semver-checks --target ${{ matrix.target }} --features c-exports
          else
              echo "No previous version found on crates.io. Skipping semver checks."
          fi
  test-on-wine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu, i686-pc-windows-gnu]

    steps:
      - uses: actions/checkout@v4

      - name: Run Tests and Coverage on WINE
        uses: Reloaded-Project/devops-rust-test-and-coverage@v1
        with:
          rust-toolchain: nightly
          target: ${{ matrix.target }}
          install-rust-toolchain: true
          setup-rust-cache: true
          upload-coverage: true
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
          features: "c-exports"
          use-cross: true

  build-c-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate C++ bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_cpp.toml
          output-header-file: bindings_cpp.hpp

      - name: Generate C bindings
        uses: Reloaded-Project/devops-rust-cbindgen@v1
        with:
          config-file: cbindgen_c.toml
          output-header-file: bindings_c.h

  publish-crate:
    permissions:
      contents: write

    needs: [build-and-test,build-c-headers,test-on-wine]
    # Publish only on tags
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Rust Crate and Artifacts  
        uses: Reloaded-Project/devops-publish-action@v1
        with:
          crates-io-token: ${{ secrets.CRATES_IO_TOKEN }}
          rust-project-paths: |
            .